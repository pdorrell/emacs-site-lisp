~/.emacs ~/*.el  ~/_local/emacs  ~/_local/emacs/local-configs2.el  _project.el    emacs-init.el  elpa  *.el  search-specs   ~/.emacs.d/

my-start.el  my-utils.el  my-abbrev.el   ../sandbox/  file-menu.el   my-line-filtering.el  my-essential.el  my-file-menu.el  my-file.el

my-testing.el  my-lsp.el my-lean4.el  my-web-lsp.el  mac-keypad-fixes.el  my-treesitter.el  my-modes.el  my-images.el

html-abbrev.el  my-project.el  my-lean4.el  my-ruby.el  my-html.el  my-java.el  my-javascript.el   my-python.el  my-prog.el  my-shell.el  my-emacs-lisp.el  typescript-abbrev.el

my-process.el  test.el  javascript-abbrev.el  my-python.el    my-edit.el  my-sql.el  my-markdown.el
my-regenerate.el  my-project-runners.el  my-project-defaults.el  my-line-matchers.el     my-global-keyboard-shortcuts.el      my-search.el

my-file.el  _test.js  test.el     test/test-project/    ~/dev/projects/music/jones-client/read_aum_proj.py

run-javascript.js   ../sandbox/test.py  ../sandbox/test.html  ../sandbox/test2.el  ../sandbox/_test.js   test/test-project/src/subdir/hello_world.py

test/test-project/src/subdir/hello_world.py   "../sandbox/spaced name.txt"

I want to call (save-some-buffers) in Emacs, but I don't want it to worry about any file with the name "_"
(because I'm often editing one of those files when invoking an operation that requires me to save all
other buffers, eg so that a search script can work without missing unsaved changes, but I don't care about
what's actually in the "_" file anyway because it's more of a scratch file).


/usr/local/share/emacs/27.2/lisp    test/test-project2/        ~/test          .gitignore              bin     ~/todos.txt

/opt/homebrew/Cellar/emacs-plus@29/29.4/share/emacs/29.4/lisp
/opt/homebrew/Cellar/emacs-plus@30/30.1/share/emacs/30.1/lisp

--------------------------------------------------------------------------------

(window-total-height)
(window-resize (buffer-window) -2)
(list-processes t)

--------------------------------------------------------------------------------
bash: https://github.com/tree-sitter/tree-sitter-bash
typescript: https://github.com/tree-sitter/tree-sitter-typescript (your custom)
tsx: https://github.com/tree-sitter/tree-sitter-typescript (your custom)
python: https://github.com/tree-sitter/tree-sitter-python
javascript: https://github.com/tree-sitter/tree-sitter-javascript
css: https://github.com/tree-sitter/tree-sitter-css
html: https://github.com/tree-sitter/tree-sitter-html
json: https://github.com/tree-sitter/tree-sitter-json
toml: https://github.com/ikatyang/tree-sitter-toml
yaml: https://github.com/ikatyang/tree-sitter-yaml (your custom)


In typescript emacs treesitter default rules, I get this when indenting the 'const' line:

  private calculateGridLines(maxPrecision: number, dimMin: PreciseDecimal, dimMax: PreciseDecimal, worldToScreenPosition: (position: PreciseDecimal) => number): GridLine[] {
    const lines: GridLine[] = [];

Matched rule: ((parent-is "statement_block") parent-bol typescript-ts-mode-indent-offset)

and then this (indenting worldToScreenPosition and then const):

  private calculateGridLines(maxPrecision: number, dimMin: PreciseDecimal, dimMax: PreciseDecimal,
    worldToScreenPosition: (position: PreciseDecimal) => number): GridLine[] {
      const lines: GridLine[] = [];

Matched rule: ((parent-is "statement_block") parent-bol typescript-ts-mode-indent-offset)

I want to know why const seems to be indented relative to worldToScreenPosition in the second case,
and not to the 'private calculateGridLines'. I thought that 'private calculateGridLines' would be the
beginning of its "parent".
